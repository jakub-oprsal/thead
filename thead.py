import sys, codecs, yaml
import re
from datetime import datetime
from common import *
import acmart, amsart, lipics

CLS_MODULES = {
        'amsart': amsart,
        'acmart': acmart,
        'lipics': lipics,
        }

COMMENT = '''% Generated by `thead.py` <https://github.com/jakub-oprsal/thead>
% on {now}
'''

def read_args(*args):
    """Usage: make [-c CLASS] [-o OUTFILE] FILENAME"""
    cls, cls_opts, filename, outfile = None, None, None, None
    include = True
    anonymous = False

    argi = iter(args)
    for arg in argi:
        if arg == '-c' and cls is None:
            cls = next(argi)
        elif arg == '--cls-opts' and cls_opts is None:
            cls_opts = next(argi)
        elif arg == '-o' and outfile is None:
            outfile = next(argi)
        elif arg == '--no-include':
            include = False
        elif arg == '--anonymous':
            anonymous = True
        elif re.match(r'[^-].*', arg) and filename is None:
            filename = arg
        else:
            raise Exception(f"Invalid argument '{arg}'")

    if filename is None:
        raise Exception("No input filename!")
    elif outfile is None:
        m = re.match(r'(.*)\.[a-zA-Z]*', filename)
        if m:
            outfile = m.group(1) + '.tex'
        else:
            outfile = filename + '.tex'

    return cls, cls_opts, filename, outfile, include, anonymous


def main():
    cls, cls_opts, filename, outfile, include, anonymous = read_args(*sys.argv[1:])

    if cls not in CLS_MODULES:
        raise Exception(f"Unrecognised class '{cls}'!")
    clsmod = CLS_MODULES[cls]

    with open(filename, 'r') as yfile:
        data = yaml.safe_load(yfile)

    classoptions = ",".split(cls_opts) if cls_opts is not None else []

    header = clsmod.header(
            data,
            anonymous=anonymous,
            classoptions=classoptions)
    footer = clsmod.footer(data)

    ## make the body of the document
    if include == True:
        add_file = include_file
    else:
        add_file = lambda fname: render_command('input', fname)

    body = '\n'.join(add_file(filename) for filename in data['content'])

    if 'appendix' in data:
        body += '\n\\appendix\n\n'
        body += '\n'.join(add_file(filename) for filename in data['appendix'])

    ## ship the results
    with codecs.open(outfile, mode='w', encoding='utf-8') as ofile:
        ofile.write(COMMENT.format(now = datetime.now()))
        ofile.write(header)
        ofile.write(body)
        ofile.write(footer)

if __name__ == '__main__':
    main()
