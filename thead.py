import sys, codecs, yaml
import re
from datetime import datetime
import common
import acmart, amsart, lipics


CLS_MODULES = {
        'amsart': amsart,
        'acmart': acmart,
        'lipics': lipics,
        }

COMMENT = '''% Generated by `thead.py` <https://github.com/jakub-oprsal/thead>
% on {now}
'''

class Args:
    def __init__(self, args):
        self.cls = None
        self.opts = []
        self.filename = None
        self.outfile = None
        self.include = True
        self.anonymous = False

        inputs = iter(args)
        for arg in inputs:
            if arg == '-c' and self.cls is None:
                self.cls = next(inputs)
            elif arg == '--cls-opts':
                self.opts + ','.split(next(inputs))
            elif arg == '-o' and self.outfile is None:
                self.outfile = next(inputs)
            elif arg == '--no-include':
                self.include = False
            elif arg == '--anonymous':
                self.anonymous = True
            elif re.match(r'[^-].*', arg) and self.filename is None:
                self.filename = arg
            else:
                raise Exception(f"Invalid or duplicate argument '{arg}'")

        if self.filename is None:
            raise Exception("Missing input filename!")
        elif self.outfile is None:
            m = re.match(r'(.*)\.[a-zA-Z]*', filename)
            outfile = f'{m.group(1)}.tex' if m else f'{filename}.tex'


def parse(data, args):
    """ parses metadata, creates headers, content, and footer, and yields
        these to be written into a file consecutively """

    if args.cls not in CLS_MODULES:
        raise Exception(f"Unrecognised class '{args.cls}'!")
    clsmodule = CLS_MODULES[args.cls]

    ## HEADER
    yield COMMENT.format(now = datetime.now())
    yield clsmodule.header(
            data,
            anonymous=args.anonymous,
            classoptions=args.opts)

    ## BODY
    include = common.include if args.include else \
            lambda fn, end: common.render_command('input', fn) + end
    for filename in data['content']:
        yield include(filename, '\n')
    if 'appendix' in data:
        body += '\n\\appendix\n\n'
        for filename in data['appendix']:
            yield include(filename, '\n')

    ## FOOTER
    yield clsmodule.footer(data)
    return


def main():
    args = Args(sys.argv[1:])

    with open(args.filename, 'r') as f:
        data = yaml.safe_load(f)

    with codecs.open(args.outfile, mode='w', encoding='utf-8') as ofile:
        for chunk in parse(data, args):
            ofile.write(chunk)

if __name__ == '__main__':
    main()
